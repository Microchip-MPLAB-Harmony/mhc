{
  
  "0": {
    "title": "License",
    "content": "IMPORTANT: READ CAREFULLY . MICROCHIP IS WILLING TO LICENSE THIS INTEGRATED SOFTWARE FRAMEWORK SOFTWARE AND ACCOMPANYING DOCUMENTATION OFFERED TO YOU ONLY ON THE CONDITION THAT YOU ACCEPT ALL OF THE FOLLOWING TERMS. TO ACCEPT THE TERMS OF THIS LICENSE, CLICK “I ACCEPT” AND PROCEED WITH THE DOWNLOAD OR INSTALL. IF YOU DO NOT ACCEPT THESE LICENSE TERMS, CLICK “I DO NOT ACCEPT,” AND DO NOT DOWNLOAD OR INSTALL THIS SOFTWARE. . NON-EXCLUSIVE SOFTWARE LICENSE AGREEMENT FOR MICROCHIP MPLAB HARMONY INTEGRATED SOFTWARE FRAMEWORK . This Nonexclusive Software License Agreement (“Agreement”) is between you, your heirs, agents, successors and assigns (“Licensee”) and Microchip Technology Incorporated, a Delaware corporation, with a principal place of business at 2355 W. Chandler Blvd., Chandler, AZ 85224-6199, and its subsidiary, Microchip Technology (Barbados) II Incorporated (collectively, “Microchip”) for Microchip’s MPLAB Harmony Integrated Software Framework (“Software”) and accompanying documentation (“Documentation”). The Software and Documentation are licensed under this Agreement and not sold. U.S. copyright laws and international copyright treaties, and other intellectual property laws and treaties protect the Software and Documentation. Microchip reserves all rights not expressly granted to Licensee in this Agreement. . License and Sublicense Grant. . (a) Definitions. As used this Agreement, the following terms shall have the meanings defined below: . (i) &quot;Licensee Products&quot; means Licensee products that use or incorporate Microchip Products. (ii) &quot;Microchip Product&quot; means Microchip 16-bit and 32-bit microcontrollers, digital signal controllers or other Microchip semiconductor products with PIC16 and PIC18 prefix and specifically excepting the CX870 and CY920, which are not covered under this Agreement, that use or implement the Software. (iii) &quot;Object Code&quot; means the Software computer programming code provided by Microchip that is in binary form (including related documentation, if any) and error corrections, improvements and updates to such code provided by Microchip in its sole discretion, if any. (iv) &quot;Source Code&quot; means the Software computer programming code provided by Microchip that may be printed out or displayed in human readable form (including related programmer comments and documentation, if any), and error corrections, improvements, updates, modifications and derivatives of such code developed by Microchip, Licensee or Third Party. (v) &quot;Third Party&quot; means Licensee&#39;s agents, representatives, consultants, clients, customers, or contract manufacturers. (vi) &quot;Third Party Products&quot; means Third Party products that use or incorporate Microchip Products. . (b) Software License Grant. Subject to the terms of this Agreement, Microchip grants strictly to Licensee a personal, worldwide, non-exclusive, non-transferable limited license to use, modify (except as limited by Section 1(f) below), copy and distribute the Software only when the Software is embedded on a Microchip Product that is integrated into Licensee Product or Third Party Product pursuant to Section 2(d) below. . Any portion of the Software (including derivatives or modifications thereof) may not be: . (i) embedded on a non-Microchip microcontroller or digital signal controller; (ii) distributed (in Source Code or Object Code), except as described in Section 2(d) below. . (c) Documentation License Grant. Subject to all of the terms and conditions of this Agreement, Microchip grants strictly to Licensee a perpetual, worldwide, non-exclusive license to use the Documentation in support of Licensee’s use of the Software. . (d) Sublicense Grants. Subject to terms of this Agreement, Licensee may grant a limited sublicense to a Third Party to use the Software as described below only if such Third Party expressly agrees to be bound by terms of confidentiality and limited use that are no broader in scope and duration than the confidentiality and limited use terms of this Agreement: . (i) Third Party may modify Source Code for Licensee, except as limited by Section 1(f) below. (ii) Third Party may program Software into Microchip Products for Licensee. (iii) Third Party may use Software to develop and/or manufacture Licensee Product. (iv) Third Party may use Software to develop and/or manufacture Third Party Products where either: (x) the sublicensed Software contains Source Code modified or otherwise optimized by Licensee for Third Party use; or (y) the sublicensed Software is programmed into Microchip Products by Licensee on behalf of such Third Party. (v) Third Party may use the Documentation in support of Third Party&#39;s authorized use of the Software in conformance with this Section 2(d). . (e) Audit. Authorized representatives of Microchip shall have the right to reasonably inspect Licensee’s premises and to audit Licensee’s records and inventory of Licensee Products, whether located on Licensee’s premises or elsewhere at any time, announced or unannounced, and in its sole and absolute discretion, in order to ensure Licensee’s adherence to the terms of this Agreement. . (f) License and Sublicense Limitation. This Section 1 does not grant Licensee or any Third Party the right to modify any dotstack™ Bluetooth® stack, profile, or iAP protocol included in the Software. . | Third Party Requirements. Licensee acknowledges that it is Licensee’s responsibility to comply with any third party license terms or requirements applicable to the use of such third party software, specifications, systems, or tools, including but not limited to SEGGER Microcontroller GmbH &amp; Co. KG’s rights in the emWin software and certain libraries included herein. Microchip is not responsible and will not be held responsible in any manner for Licensee’s failure to comply with such applicable terms or requirements. . | Open Source Components. Notwithstanding the license grants contained herein, Licensee acknowledges that certain components of the Software may be covered by so-called “open source” software licenses (“Open Source Components”). Open Source Components means any software licenses approved as open source licenses by the Open Source Initiative or any substantially similar licenses, including any license that, as a condition of distribution, requires Microchip to provide Licensee with certain notices and/or information related to such Open Source Components, or requires that the distributor make the software available in source code format. Microchip will use commercially reasonable efforts to identify such Open Source Components in a text file or “About Box” or in a file or files referenced thereby (and will include any associated license agreement, notices, and other related information therein), or the Open Source Components will contain or be accompanied by its own license agreement. To the extent required by the licenses covering Open Source Components, the terms of such licenses will apply in lieu of the terms of this Agreement, and Microchip hereby represents and warrants that the licenses granted to such Open Source Components will be no less broad than the license granted in Section 1(b). To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components, such restrictions will not apply to such Open Source Components. . | Licensee’s Obligations. . (a) Licensee will ensure Third Party compliance with the terms of this Agreement. . (b) Licensee will not: (i) engage in unauthorized use, modification, disclosure or distribution of Software or Documentation, or its derivatives; (ii) use all or any portion of the Software, Documentation, or its derivatives except in conjunction with Microchip Products; or (iii) reverse engineer (by disassembly, decompilation or otherwise) Software or any portion thereof; or (iv) copy or reproduce all or any portion of Software, except as specifically allowed by this Agreement or expressly permitted by applicable law notwithstanding the foregoing limitations. . (c) Licensee must include Microchip’s copyright, trademark and other proprietary notices in all copies of the Software, Documentation, and its derivatives. Licensee may not remove or alter any Microchip copyright or other proprietary rights notice posted in any portion of the Software or Documentation. . (d) Licensee will defend, indemnify and hold Microchip and its subsidiaries harmless from and against any and all claims, costs, damages, expenses (including reasonable attorney’s fees), liabilities, and losses, including without limitation product liability claims, directly or indirectly arising from or related to: (i) the use, modification, disclosure or distribution of the Software, Documentation or any intellectual property rights related thereto; (ii) the use, sale, and distribution of Licensee Products or Third Party Products, and (iii) breach of this Agreement. THE FOREGOING STATES THE SOLE AND EXCLUSIVE LIABILITY OF THE PARTIES FOR INTELLECTUAL PROPERTY RIGHTS INFRINGEMENT. . | Confidentiality. . (a) Licensee agrees that the Software (including but not limited to the Source Code, Object Code and library files) and its derivatives, Documentation and underlying inventions, algorithms, know-how and ideas relating to the Software and the Documentation are proprietary information belonging to Microchip and its licensors (“Proprietary Information”). Except as expressly and unambiguously allowed herein, Licensee will hold in confidence and not use or disclose any Proprietary Information and shall similarly bind its employees and Third Party(ies) in writing. Proprietary Information shall not include information that: (i) is in or enters the public domain without breach of this Agreement and through no fault of the receiving party; (ii) the receiving party was legally in possession of prior to receiving it; (iii) the receiving party can demonstrate was developed by it independently and without use of or reference to the disclosing party’s Proprietary Information; or (iv) the receiving party receives from a third party without restriction on disclosure. If Licensee is required to disclose Proprietary Information by law, court order, or government agency, such disclosure shall not be deemed a breach of this Agreement provided that Licensee gives Microchip prompt notice of such requirement in order to allow Microchip to object or limit such disclosure, Licensee cooperates with Microchip to protect Proprietary Information, and Licensee complies with any protective order in place and discloses only the information required by process of law. . (b) Licensee agrees that the provisions of this Agreement regarding unauthorized use and nondisclosure of the Software, Documentation and related Proprietary Rights are necessary to protect the legitimate business interests of Microchip and its licensors and that monetary damages alone cannot adequately compensate Microchip or its licensors if such provisions are violated. Licensee, therefore, agrees that if Microchip alleges that Licensee or Third Party has breached or violated such provision then Microchip will have the right to petition for injunctive relief, without the requirement for the posting of a bond, in addition to all other remedies at law or in equity. . | Ownership of Proprietary Rights. . (a) Microchip and its licensors retain all right, title and interest in and to the Software and Documentation (“Proprietary Rights”) including, but not limited to: (i) patent, copyright, trade secret and other intellectual property rights in the Software, Documentation, and underlying technology; (ii) the Software as implemented in any device or system, all hardware and software implementations of the Software technology (expressly excluding Licensee and Third Party code developed and used in conformance with this Agreement solely to interface with the Software and Licensee Products and/or Third Party Products); and (iii) all modifications and derivative works thereof (by whomever produced). Further, modifications and derivative works shall be considered works made for hire with ownership vesting in Microchip on creation. To the extent such modifications and derivatives do not qualify as a “work for hire,” Licensee hereby irrevocably transfers, assigns and conveys the exclusive copyright thereof to Microchip, free and clear of any and all liens, claims or other encumbrances, to the fullest extent permitted by law. Licensee and Third Party use of such modifications and derivatives is limited to the license rights described in Section 1 above. . (b) Licensee shall have no right to sell, assign or otherwise transfer all or any portion of the Software, Documentation or any related intellectual property rights except as expressly set forth in this Agreement. . | Termination of Agreement. Without prejudice to any other rights, this Agreement terminates immediately, without notice by Microchip, upon a failure by License or Third Party to comply with any provision of this Agreement. Further, Microchip may also terminate this Agreement upon reasonable belief that Licensee or Third Party have failed to comply with this Agreement. Upon termination, Licensee and Third Party will immediately stop using the Software, Documentation, and derivatives thereof, and immediately destroy all such copies, remove Software from any of Licensee’s tangible media and from systems on which the Software exists, and stop using, disclosing, copying, or reproducing Software (even as may be permitted by this Agreement). Termination of this Agreement will not affect the right of any end user or consumer to use Licensee Products or Third Party Products provided that such products were purchased prior to the termination of this Agreement. . | Dangerous Applications. The Software is not fault-tolerant and is not designed, manufactured, or intended for use in hazardous environments requiring failsafe performance (“Dangerous Applications”). Dangerous Applications include the operation of nuclear facilities, aircraft navigation, aircraft communication systems, air traffic control, direct life support machines, weapons systems, or any environment or system in which the failure of the Software could lead directly or indirectly to death, personal injury, or severe physical or environmental damage. Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss, damages and claims resulting from the use of the Software in Dangerous Applications. . | Warranties and Disclaimers. THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. MICROCHIP AND ITS LICENSORS ASSUME NO RESPONSIBILITY FOR THE ACCURACY, RELIABILITY OR APPLICATION OF THE SOFTWARE OR DOCUMENTATION. MICROCHIP AND ITS LICENSORS DO NOT WARRANT THAT THE SOFTWARE WILL MEET REQUIREMENTS OF LICENSEE OR THIRD PARTY, BE UNINTERRUPTED OR ERROR-FREE. MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE. LICENSEE AND THIRD PARTY ASSUME THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE AND DOCUMENTATION PROVIDED UNDER THIS AGREEMENT. . | Limited Liability. IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL OR EQUITABLE THEORY FOR ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS. The aggregate and cumulative liability of Microchip and its licensors for damages hereunder will in no event exceed $1000 or the amount Licensee paid Microchip for the Software and Documentation, whichever is greater. Licensee acknowledges that the foregoing limitations are reasonable and an essential part of this Agreement. . | General. . (a) Governing Law, Venue and Waiver of Trial by Jury. THIS AGREEMENT SHALL BE GOVERNED BY AND CONSTRUED UNDER THE LAWS OF THE STATE OF ARIZONA AND THE UNITED STATES WITHOUT REGARD TO CONFLICTS OF LAWS PROVISIONS. Licensee agrees that any disputes arising out of or related to this Agreement, Software or Documentation shall be brought in the courts of State of Arizona. The parties agree to waive their rights to a jury trial in actions relating to this Agreement. . (b) Attorneys’ Fees. If either Microchip or Licensee employs attorneys to enforce any rights arising out of or relating to this Agreement, the prevailing party shall be entitled to recover its reasonable attorneys’ fees, costs and other expenses. . (c) Entire Agreement. This Agreement shall constitute the entire agreement between the parties with respect to the subject matter hereof. It shall not be modified except by a written agreement signed by an authorized representative of Microchip. . (d) Severability. If any provision of this Agreement shall be held by a court of competent jurisdiction to be illegal, invalid or unenforceable, that provision shall be limited or eliminated to the minimum extent necessary so that this Agreement shall otherwise remain in full force and effect and enforceable. . (e) Waiver. No waiver of any breach of any provision of this Agreement shall constitute a waiver of any prior, concurrent or subsequent breach of the same or any other provisions hereof, and no waiver shall be effective unless made in writing and signed by an authorized representative of the waiving party. . (f) Export Regulation. Licensee agrees to comply with all export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority. . (g) Survival. The indemnities, obligations of confidentiality, and limitations on liability described herein, and any right of action for breach of this Agreement prior to termination shall survive any termination of this Agreement. . (h) Assignment. Neither this Agreement nor any rights, licenses or obligations hereunder, may be assigned by Licensee without the prior written approval of Microchip except pursuant to a merger, sale of all assets of Licensee or other corporate reorganization, provided that assignee agrees in writing to be bound by the Agreement. . (i) Restricted Rights. Use, duplication or disclosure by the United States Government is subject to restrictions set forth in subparagraphs (a) through (d) of the Commercial Computer-Restricted Rights clause of FAR 52.227-19 when applicable, or in subparagraph (c)(1)(ii) of the Rights in Technical Data and Computer Software clause at DFARS 252.227-7013, and in similar clauses in the NASA FAR Supplement. Contractor/manufacturer is Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85225-6199. . | If Licensee has any questions about this Agreement, please write to Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199 USA, ATTN: Marketing. . Microchip MPLAB Harmony Integrated Software Framework. Copyright © 2015 Microchip Technology Inc. All rights reserved. . License Rev. 11/2015 . Copyright © 2015 Qualcomm Atheros, Inc. All Rights Reserved. . Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. . THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. .",
    "url": "http://localhost:4000/mhc/mplab_harmony_license.html",
    "relUrl": "/mplab_harmony_license.html"
  }
  ,"1": {
    "title": "MPLAB Harmony 3 Configurator (MHC) Overview",
    "content": "MPLAB Harmony v3 Configurator (MHC) is a free, graphical programming environment that generates seamless, easy-to-understand C code to be inserted into your project. The intuitive Graphical User Interface (GUI) simplifies device setup, library selection and configuration, and application development The MHC is available as a plugin that directly integrates with the MPLAB® X IDE and as a separate Java executable for standalone use with other development environments. . The configurator provides convenient and powerful development tools for choosing library components from downloaded packages and configuring them for the developer’s application. The built-in code generator produces library and application starter code (usually in source form), based on the options chosen by the developer. — .",
    "url": "http://localhost:4000/mhc/doc/readme.html",
    "relUrl": "/doc/readme.html"
  }
  ,"2": {
    "title": "Create IAR/KEIL Project with MHC",
    "content": "Creating an IAR or KEIL project using MHC . When creating projects for IAR or KEIL IDEs, MHC is launched as an application (as opposed to a plugin in MPLAB® X, when creating MPLAB® X projects). We refer to this mode of operation of MHC as “standalone” mode throughout this document. Follow the steps detailed below to create an project for IAR or KEIL using MHC . Launching MHC in standalone mode . Navigate to the local clone of this repository and run the script that is appropriate for your operating system. That is . For Windows, run the script runmhc.bat | For Linux/MacOS, run the script runmhc.sh | . This will launch the MHC as an application (see below): . . Setting user preferences . User preferences can be set by navigating to File -&gt; Preferences. MHC allows user to configure two preferences . Diff - Allows user to configure a diff tool. This is an important configuration, and is explained further down in project generation section. We can configure any third party diff tool. To set diff tool, navigate to its installation directory using the browse button and select the executable. {0} and {1} are place holders for the files that need to diffed during project file generation. In this example, we are using WinMerge as the diff tool. . . | Log - Allows user to set the log level. There are three levels of logging available (ALL, DEBUG, USER). MHC displays the logs in the console window (seen at the bottom of the main window). It also saves them in the mhc.log file under .mh3 folder in user’s home directory. This log level decides the kind of messages that will get logged. . . | . Creating a new configuration . To create a new mhc configuration, choose File -&gt; New configuration. A new configuration creation dialog will popup, where we can enter the details of the configuration that we are about to create. . . Framework Path - This is not configurable. Framework path defaults to the parent folder of the MHC repository. This folder is should contain relevant harmony 3 repositories required for project creation. Recommend using content manager for downloading and setting up Harmony 3 repositories. Make sure that the “Convert to relative path for configuration” check box is unchecked. . | Project information - Under project information, user can choose the location of the project, name of the project and the name of the configuration. Location - Location where the project and configuration will be created | Project name -Used by MHC when creating projects for target IDEs. If you want a KEIL or IAR project with specific name, it should be entered in this field | Configuration name - Used by MHC when creating configuration data | Path - Shows the location where the new configuration will be created. Paths used by MHC for creating the project and configuration follows these rules configuration information will be created under &lt;location&gt;/firmware/source/config/&lt;configuration_name&gt; folder. In this example it will be “D: Projects My_Harmony_3 firmware src config default” folder | IDE projects will be created under &lt;location&gt;/firmware/&lt;configuration_name&gt;.&lt;IDE name&gt; folder. In this example, if we choose to create an IAR project, it will be created under “D: Projects My_Harmony_3 firmware default.IAR” folder | . | . | Configuration Options - Allows us to choose the target device of this confifuration. Device Family drop down limits the options to a specific family when choosing the target device, while Device Filter allows searching for a device by entering few characters. In this instance, ATSAMC21N18A MCU is chosen for creating the configuration. | . Clicking finish button will popup a confirmation dialog. We can change the default Device Family Pack (DFP) and CMSIS Pack used for creating the configuration from this dialog. Click on the launch button to create a new configuration. . . Making changes to the configuration . Refer to documentation on how to use the project graph for configuring Harmony 3 components using mplabx Harmony 3 configurator. . Generating code and project associated with a configuration . . Select the target toolchain by clicking the system component in the project graph and choosing System -&gt; Project Configuration -&gt; Toolchain selections -&gt; Compilers in the configuration option window. Available options are XC32, IAR and KEIL. Some of these options might not be available for all targets. Choosing IAR or KEIL as the target compiler, will result in MHC creating IAR embedded workbench or Keil uVision IDE projects for the selected target. In this case, we have chosen KEIL as the toolchain. . | Select Generate - &gt; Generate code option in menu bar to start project generation. In the generation window, we can choose the merge strategies. . . | Based on the choosen merge startegy, when MHC identifies that there is a diff in the files it generated (for eg: modification within the project IDE), it will launch the configured diff tool. We can bring in the changes that are relevant and ignore the rest. Once the diff tool is closed, the project generation sequence is continued until the entire configuration is generated. . | If IAR or KEIL is chosen as the toolchain, MHC will also create a folder containing the relevant project files which can then be opened using the corresponding IDE. The path of this folder, follows the rules explained in the “configuration” section. In this example, it would be under “D: Projects My_Harmony_3 firmware default.KEIL”, since we choose keil as the the toolchain. . | MHC generates Project Manifest to indicate the list of Harmony packages and its versions used in the project. . | .",
    "url": "http://localhost:4000/mhc/doc/readme_creating_iar_keil_project.html",
    "relUrl": "/doc/readme_creating_iar_keil_project.html"
  }
  ,"3": {
    "title": "Create MPLAB X Project with MHC",
    "content": "Creating MPLAB® Harmony 3 Project using MPLAB® X IDE . To create a new MPLAB® X IDE Harmony 3 project, launch the MPLAB® X IDE. . Launch the New Project Wizard using one of the following methods: From the Toolbar: Click on the New Project icon , or | From the Menu: Select File -&gt; New Project, or | From the Keyboard: Ctrl + Shift + N | . | Choose “32-bit MPLAB® Harmony 3 Project” and Click Next . . | Specify the location where the Harmony 3 repositories have been downloaded with content manager, then click Next. . . | Specify Project Name, Location and Folder. Location: Indicates the path to the root folder of the new project. All project files will be placed in this folder. | Folder: Indicates the physical name of the MPLAB® X .X project folder (Absolute location is indicated in Path). This allows creation of multiple projects in the same location. | Name: Indicates the logical name of the MPLAB® X Project | Click the Show Visual Help button to open a contextual help window for a detailed description of various fields in the Configuration Settings. | . . | Specify configuration name and Select Device. . . | Launching MHC from MPLAB X After selecting the target device, click Finish to launch MHC. | Users can also launch MHC by selecting Tools &gt; Embedded &gt; MPLAB® Harmony 3 Configurator from the MPLAB X IDE | . . If necessary, reconfigure the MPLAB® X Harmony framework paths by clicking the Reconfigure Paths button. Otherwise, accept the default settings and then click Launch. | . . | . Configure and Generate code with MHC . Refer to MHC Configuration page for details on how to add, configure and interconnect required software components . | Save MHC configuration and Generate Code. . | Once the Harmony code is generated, user application should be developed in “main.c” or “app.c”. . | . Build and Program with MPLAB X IDE . In MPLAB® X IDE, go to File &gt; Project Properties, and make sure that appropriate compiler version, hardware tools and DFP version should be selected. . | Clean and build your application by clicking on the Clean and Build button as shown below. . | Program your application to the device by clicking on the Make and Program button as shown below. . | .",
    "url": "http://localhost:4000/mhc/doc/readme_creating_mplabx_project.html",
    "relUrl": "/doc/readme_creating_mplabx_project.html"
  }
  ,"4": {
    "title": "Generate Code",
    "content": "Saving Configuration and Generating code . To save the MHC configuration, click the Save icon in MPLAB® Harmony Configurator (MHC) as shown below. . . | Save the configuration in its default location when prompted. The MHC configuration file is included in the MPLAB® X IDE project, under the Important Files folder. The configuration file uses the extension .xml. . . | The users can click the Generate Code button as shown below to generate code and add to the project. . . | If prompted for saving the configuration, click Save. . . | Select Merge Strategy and Click on the Generate button in the Generate Project window. The description of each merge strategy can be seen by clicking “?” button . . | If any of the files generated by the MHC has been edited outside of MHC and saved to the disk, then the Merge [MHC] window will appear during generation. You must resolve merge conflicts to ensure that all the newly generated code is incorporated into the project. . . | MHC also generates Project Manifest to indicate the list of Harmony packages and its versions used in the project. Manifest File is generated in the configuration folder ( /../src/config/config-name/harmony-manifest-success.yml) . | .",
    "url": "http://localhost:4000/mhc/doc/readme_generate_code.html",
    "relUrl": "/doc/readme_generate_code.html"
  }
  ,"5": {
    "title": "Install MHC Plugin",
    "content": "Installing MHC Plugin and Downloading Harmony packages . This page will show you how to install MPLAB® Harmony Configurator (MHC). The MHC includes the MPLAB Harmony Content Manager (MHCM) tool. This tool includes a downloader that reads the MPLAB Harmony GitHub repository to create a list of available packages. You choose which packages you want to download from this list. .",
    "url": "http://localhost:4000/mhc/doc/readme_install_mhc.html",
    "relUrl": "/doc/readme_install_mhc.html"
  }
  ,"6": {
    "title": "Launch MHC",
    "content": "Launching MHC . The MHC is available as a plugin that directly integrates with the MPLAB® X IDE and as a separate Java executable for standalone use with other development environments. . Launching MHC as MPLAB X IDE Plug in to create MPLAB X Project. | Launching MHC as standalone application to create IAR or KEIL Project | . Launching MHC as MPLAB X IDE Pulgin to create MPLAB X Project. . MHC will launch automically after Creating MPLAB® Harmony 3 Project using MPLAB® X IDE . | For existing Harmony 3 Projects, the user can manually launch MHC by selecting Tools &gt; Embedded &gt; MPLAB® Harmony 3 Configurator from the MPLAB X IDE . . | If necessary, reconfigure the MPLAB® X Harmony framework paths by clicking the Reconfigure Paths button. Otherwise, accept the default settings and then click Launch. . . | . Launching MHC as standalone application to create IAR or KEIL Project . When creating projects for IAR or KEIL IDEs, MHC is launched as an standalone application and we refer to this mode of operation of MHC as standalone mode.. To launch MHC as standalone application, Navigate to the local clone of this repository and run the script that is appropriate for your operating system. This will launch the MHC as an standalone application. . For Windows, run the script runmhc.bat | For Linux/MacOS, run the script runmhc.sh | . Configuring MHC Plugin in MPLAB X IDE . Select MHC Plugin configuration using Tools &gt; Options &gt; Plugins &gt; MPLAB® Harmony Configurator 3 to specify the Harmony 3 path, Select Window Manager and Log level. . Specify the location where the Harmony 3 repositories have been downloaded with content manager, then click Next. . . | Select the required window manager mode. The MHC plug-in will open either in a new window (standalone mode) or inside MPLAB® X window (native mode). . | Select the required Log Level. There are three levels of logging available (ALL, DEBUG, USER). MHC displays the logs in the console window (seen at the bottom of the main window). It also saves them in the mhc.log file under .mh3 folder in user’s home directory. This log level decides the kind of messages that will get logged. . . | .",
    "url": "http://localhost:4000/mhc/doc/readme_launching_mhc.html",
    "relUrl": "/doc/readme_launching_mhc.html"
  }
  ,"7": {
    "title": "Configure Components",
    "content": "MPLAB Harmony Configurator Overview . This section provides brief overview of MHC user interface in native Netbeans mode . Window Name Description . Available Components | Displays the list the list of available components in the downloaded harmony 3 packages that are applicable for the selected target device | . Active Components | Displays activated/instantiated components | . Project Graph | Shows the instantiated components and its interconnections | . MHC Plugins | Shows the available custom UI configurators to simplify the peripheral configuration. To open any of these plugins, go to MHC &gt; Tools and select the required peripheral UI configurator | . Configuration Options | Displays the tree view of the selected component under Project Graph Area. You can do the component configuration from here. | . Console | Displays the MHC operation results. | . Note: . The available components are based on the Microcontroller selected while creating the project. | All operating areas are dockable. Each can be dragged and dropped into another position, even out of the MPLAB® X IDE main window. However, closing the IDE however will close all MHC windows, including the ones moved outside the IDE. | . Adding and Removing component . To instantiate a component, from the available components, double click on any available component or drag and drop it to the Project Graph. After the component is instantiated, the instantiated component will be displayed in the Project Graph Area. . | To remove a component available in Active component area, follow these steps . Select it (for example, FreeRTOS) in Active Component Area or in Project Graph Area then click on Delete Selected Components icon . | A pop-up window will display asking whether to deactivate a component. The following figure deactivating the FreeRTOS component. | Click Yes to deactivate the FreeRTOS component. | . | . . Configuring Component with Treeview . The Configuration Options window provides a treeview configuration for the selected component. The user can select the component either in the project graph or from the available components list. . Configuring component with Customer UI . The Custom UI configuration are provided for pin, clock, interrupt, DMA and other select peripherals to simplify the configuations. Go to MHC &gt; Tools and select the required peripheral UI configurator . Note: The available UI configurators will vary based on target device selected. . Managing Dependency with Project Graph . In the Project Graph window, each component is shown in the form of a rectangular box. . Dependency Towards the left-side edge of these rectangular boxes, there are small boxes (dependency box) shown, which indicate the dependency of the component. Having a dependency means, the component is dependent on some other component for its correct functionality. | . | Capability Towards the right-edge of the rectangular boxes, there will be small boxes (capability box) shown, indicating capability of the component. Having capability means the component is exposing its features to other components. | . | . . The following are three types of dependencies: . Direct Dependency is indicated by rhombus terminal and it requires direct connection (one-to-one) to satisfy them. For exampe, the TIME component in the graph above is connected to TC0 componet to satify TMR dependency. | Implied Dependency is indicated by circular terminal and it does not need explicit connections to satisfy them. For example, the implied dependency of the TIME, SDMMC, MEMORY and FILE SYSTEM components in the graph above are satified by the Core component that provides Implied Capability for Core Service. | Multi Dependency is indicated by square terminal and it allows connection to multiple components (One-to-Many). For example, the FILE SYSTEM component in the graph above is connected SDMMC and MEMORY component to run File system with multiple media. | . The following are three types of capabilities: . Direct capability is indicated by rhombus terminal and it requires direct connection (one-to-one) to the the client component | Implied capability is indicated by circular terminal and it does not need explicit connections to the client component. | Multi Capability is indicated by square terminal and it allows connection to multiple client components (one-to-many) | . The color coding of dependency and capability . The green color of the box indicates a dependency/capability is already satisfied. | The red color of the box indicates it needs to be satisfied. | The yellow color of the box indicates it is optional to satisfy this dependency. For example, the Core component shows a Implied dependency for RTOS that is not satisfied, since this application is bare metal, i.e., without an RTOS. | . Identify and connect to a component that satisfy the dependency . Right-click on the dependency box to find the list of available components that satisfies the dependency, and then select the appropriate satisfier as shown in the following figure . . Identify and connect to a component that consume the capability . Right-click on the capability box to find the list of consumer that satify the capability and then select the appropriate consumper as shown in the following figure . . Deleting connection . To delete an existing connection, right click on either dependency and capability box and then select Disconnect . Multi-instance Components . Many Harmony drivers can instantiate more than one instance of a driver. Here is an example of an I2C Driver in use: . . Clicking on the + icon adds another instance of the driver: . . Clicking on the entire I2C component brings up the component’s properties in the Configuration Options panel: . . Clicking on each driver instance brings up the Configuration Options panel for that instance: . .",
    "url": "http://localhost:4000/mhc/doc/readme_mhc_configuration.html",
    "relUrl": "/doc/readme_mhc_configuration.html"
  }
  ,"8": {
    "title": "Project Group",
    "content": "Simplifying Project Graphs with Groups . This section shows how to simplify the Project Graph by combining multiple components into a group. . There are 9 icons on the Project Graph toolbar: . . Delete Selected Components - Remove from the Project Graph the selected components. | Create Group - Groups aggregate two or more components or groups into a new “component” on the graph. This is very useful in simplifying a complex project graph containing many components. | Disband Group - The opposite of creating a group. The components and subgroups in the group are returned to the parent group or the main project graph. | Add Selected to Group - Add the selected component or group to another group identified by a pull-down menu. | View Selected Group - Change Project Graph to show the contents of the selected group. This is the same as double clicking on a group. | Configure Group Nodes - In the parent group or the main project graph, select a group and then select this icon. This will bring up a dialog to configure the nodes (connections) of that link outside components or groups to the contents of the selected group. | Select Next Highest Group - Moves the project graph up the group hierarchy to the parent group or main project graph. | Adjust Canvas Size - Adjusts the screen size of the project graph. | Groups Pull-Down - An alphabetical pull-down list of the project’s groups. | A component group combines two or more components or groups into a new “component” on the Project Graph. Groups allow simplifying complex project graphs into a more understandable organization of project components. As a demonstration, below the Aria Quickstart graphics demonstration is used. It can be found under ./gfx/apps/aria_quickstart. . On the project graph there are three components related to supporting capacitive touch that can be combined into a group called “CapTouch”: . . Three components combine into one group, with a node “Touch Panel” that connects to the display. To start, select these three components: . . Container or Group Creation . The following are different group options. The Root is the default group. . Create Group or click : Creates a group. If user selects any component and clicks , then a pop-up is shown asking to automatically add selected components to the new group. | Disband Group or click : Deletes a selected group. User can delete one group at a time. If user selects any component and clicks ,then a pop-up is shown asking to delete selected group. | Add selected to Group/Container or click : Adds selected component in to a target container. On clicking a pop-up with drop down menu option is shown asking user to select the target container. | View selected Group/Container or click : Select a group and click or double click a group to view the components grouped together in a container. | Configure Group Node or click : Select a group then click to display the connections of the components if any. On clicking a pop-up window is displayed showing the tabular list of available nodes, select the nodes to display in the group. | Select Next Highest Group or click : Selects the next highest group available. Root is the default group. Select a group and click or double click a group to view the components grouped together in a container then to select next highest group click or to select a group under a drop down . | . . Multiple components added to group or container. This helps in simplifying the Project Graph view. The following figure illustrates the grouping of SPI Driver and SPI PLIB components. Similarly, user can create any number of group or container based on the requirement. Say for example separate container for TCP/IP and USB and so on. or based on the application need. . . Then select the Create Group icon on the MHC toolbar: . . Answer Yes to the Create New Group dialog window: . . Next, select the group (Group0) just created in the graph and change its name in the Configuration Options window to CapTouch: . . Double click on this new group and rearrange and reconnect the components: . . NOTE: Using a screen capture tool will help you remember how group components are connected. One of the few shortcomings to this MHC capability is that when groups are created or disbanded the prior connections among the group’s components are forgotten by MHC. Having a snapshot of the component setup helps in reconstructing these connections. . Exit and return to the main graph by selecting the Up Arrow icon in the toolbar: . . Next, configure the CapTouch group’s Touch Panel node. Select the CapTouch group and then select the Configure Group Nodes icon on the toolbar: . . Enable the visibility of the touch_panel node belonging to the gfx_maxtouch_controller. Select Done to finish. . . Finally, drag the CapTouch group down to be just to the right of the display component and connect the two Touch Panel nodes: . . In the end, the project graph is simpler: . .",
    "url": "http://localhost:4000/mhc/doc/readme_project_group.html",
    "relUrl": "/doc/readme_project_group.html"
  }
  ,"9": {
    "title": "Project Manifest",
    "content": "Project Manifest . MHC generates Project Manifest to indicate the list of Harmony packages and its versions used in the project. Manifest File file is added to the MPLAB X Project . . . The content of a sample manifest file is show below . The manifest file includes: . Project Name | Creation date and time | Operating System | MHC Mode | MPLAB X IDE version | MPLAB Harmony Configurator (MHC) Plugin version | XC32 Compiler version | List of Harmony packages and its versions used in the project | When MHC is launched on any existing project, MHC compares the package and its version used in the project vs what is available in the local package. . It will launch MHC if the location package version is same as the package versions used in the project. | It will pop up a warning dialog if the local package version is different the package version used in the project. Content Manager can be used to setup the local packages and versions based on this manifest file. | .",
    "url": "http://localhost:4000/mhc/doc/readme_project_manifest.html",
    "relUrl": "/doc/readme_project_manifest.html"
  }
  ,"10": {
    "title": "Create MPLAB X TrustZone Project with MHC",
    "content": "Creating MPLAB® Harmony 3 TrustZone-M Project using MPLAB® X IDE . To create a new TrustZone project, in MPLAB® X IDE, Select File &gt; New Project or click . The New Project wizard will open. Perform following steps: . Choose Project: In the Choose Project pane, select the Microchip Embedded category. | In the Projects pane, select 32-bit MPLAB® Harmony 3 Project, then click Next. | . Note: If the 32-Bit MPLAB® Harmony 3 Project type is not listed under the Microchip Embedded category, please download and install MPLAB® Harmony 3 Configurator before continuing with these steps. . | Framework Selection: Provide the framework path where Harmony 3 repositorries have been downloaded, then click Next. | . . | Project Settings: Location: Indicates the path to the root folder of the new project. All project files will be placed in this folder. | Folder: Indicates the name of the MPLAB® X IDE folder. | Name: Enter name of the project which you want to see in MPLAB® X IDE, click Next. | Path: The path information will be updated automatically as and when users make changes to other fields. | . . Note: Click the “Show Visual Help” button to open a contextual help window for a detailed description of various fields in the Project Settings. . | Configuration Settings: Name: Enter the configuration name. | Target Device: Choose target device | TrustZone Enabled: Select checkbox and click Finish to launch MPLAB® Harmony Configurator (MHC). After clicking the Finish button, MHC will create Secure and Non-secure MPLAB® X Projects. | . . | Launching MHC from MPLAB X After selecting the target device, click Finish to launch MHC. | Users can also launch MHC by selecting Tools &gt; Embedded &gt; MPLAB® Harmony 3 Configurator from the MPLAB X IDE | . . If necessary, reconfigure the MPLAB® X Harmony framework paths by clicking the Reconfigure Paths button. Otherwise, accept the default settings and then click Launch. | . . For TrustZone devices, the MHC Generates two projects viz., Secure and Non-Secure Project that work together on the same MCU and offering security isolation between the Trusted and the Non-trusted resources in the device. Non-secure project is selected as Main Project to launch MHC. | Secure project is selected as a loadable project from the Non-secure project. When Non-secure Project builds, it first builds Secure Project and then Non-secure project and generates target binaries to be executed on the device. | . | . . | Launch TrustZone-M Manager Launch TrustZone manager | . . Memory Configuration MHC generates fuse setting in secure project and it programmed as part of secure image to partition memory between secure and non-secure project | MHC 3 generates linker macros in secure and non-secure project to define the memory region in linker file as per fuse configuration | . | Peripheral Configuration MHC generates fuse setting in secure project to assign peripheral to non-secure project | . | . | Configure and Generate code with MHC . Refer to MHC Configuration page for details on how to add, configure and interconnect required software components . | Save MHC Configuration and Generate Code. . | Once the Harmony code is generated, user application should be developed in “main.c” or “app.c” of the secure and non-secure project. . | . Build and Program with MPLAB X IDE . Make Non-Secure Project as main project For TrustZone devices, the MHC Generates two projects viz., Secure and Non-Secure Project that work together on the same MCU and offering security isolation between the Trusted and the Non-trusted resources in the device. | Secure project is selected as a loadable project from the Non-secure project. When Non-secure Project builds, it first builds Secure Project and then Non-secure project and generates target binaries to be executed on the device. | . | In MPLAB® X IDE, go to File &gt; Project Properties, and make sure that appropriate compiler version, hardware tools and DFP version should be selected. . | Clean and build your application by clicking on the Clean and Build button as shown below. . | Program your application to the device by clicking on the Make and Program button as shown below. | .",
    "url": "http://localhost:4000/mhc/doc/readme_trustzone_project.html",
    "relUrl": "/doc/readme_trustzone_project.html"
  }
  ,"11": {
    "title": "Release notes",
    "content": "MPLAB® Harmony 3 Release Notes . See the following links and release notes for additional information. . Read-me File | Welcome to MPLAB Harmony 3 | www.microchip.com/harmony | . MPLAB® Harmony 3 Configurator Release v3.5.0 . New Features and Fixes . Added support to report MPLAB X analytics. | TrustZone-M enhancements and bug fixes. | Added project group feature to support TrustZone-M project. | Added support to display compiler information in the manifest file. | Added support to warn user about differences between Manifest and local Packages copies. | Added support to list only used modules of a project in manifest file. | Fixed Preprocessor macro update issue for TrustZone-M projects. | Updated MHC NBM v3.6.0 to support new MHC changes. | Bug fixes. | . Known Issues . None | . Development Tools . MPLAB X IDE v5.40 | . MPLAB® Harmony 3 Configurator Release v3.4.1 . New Features and Fixes . Fixed duplicate file entries in MPLABX mode code generation | Fixed issue of code generation in headless mode if the project name is empty. | Fixed issue in resolving file path in Linux OS. | Fixed issue of MHC not launching when user name contains accented or Chinese characters | . Known Issues . None | . Development Tools . MPLAB X IDE v5.40 | . MPLAB® Harmony 3 Configurator Release v3.4.0 . New Features and Fixes . Added support for TrustZone to create secure and non-secure project | Added support to generate manifest file containing the harmony packages and its version information | Added support to generate IAR Embedded Workbench and Keil uVision project | Added support to include harmony configuration files as part of packaging project into a zip file | Updated project group icon for easier identification | . Known Issues . None | . Development Tools . MPLAB X IDE v5.40 | . MPLAB® Harmony 3 Configurator Release v3.3.5 . New Features and Fixes . Now Customers are notified for latest MHC updates and news feeds | IPCF file generation issue has been fixed and creates correct xml define tag | . Known Issues . None | . Development Tools . MPLAB X IDE v5.30 | . MPLAB® Harmony 3 Configurator Release v3.3.4 . New Features and Fixes . Removed Git management of Harmony 3 modules. | Release synchronized with MPLAB® Harmony Content Manager v1.1.0. | Removed now obsoleted Harmony Framework Downloader. | Removed temporary beta Content Manager | . Known Issues . None | . Development Tools . MPLAB X IDE v5.30 | . MPLAB Harmony 3 Configurator Release v3.3.3 . New Features and Fixes . Dot release to bring Content Manager beta updates | . Known Issues . None | . Development Tools . MPLAB® X IDE v5.20 | . MPLAB Harmony 3 Configurator Release v3.3.2 . New Features and Fixes . Dot release to bring Content Manager beta | . Known Issues . None | . Development Tools . MPLAB X IDE v5.20 | . MPLAB Harmony 3 Configurator Release v3.3.1 . New Features and Fixes . Fixed conflict in include directories upon changing device. | Fixed exception throwned if no diff tool was configured in standalone mode. | . Known Issues . None | . Development Tools . MPLAB X IDE v5.20 | . MPLAB Harmony 3 Configurator Release v3.3.0 . New Features and Fixes . Internal database management improved. | Added support of SAM9X60. | Fixed hardcoded links in Launcher. | Improved IAR project generator. | Fixed headless generator, used for continuous integration. | . Known Issues . None | . Development Tools . MPLAB X IDE v5.15 | . MPLAB Harmony 3 Configurator Release v3.2 . New Features and Fixes . Added PIC32MK Family Support | [Make warnings into errors] and [additional warnings] XC32 options are selected for all new Harmony projects | Enabled Ifo button functionality for downloaded repos | Fixed html links capability in MHC help | . Known Issues . None | . Development Tools . MPLAB X IDE v5.15 | . MPLAB Harmony 3 Configurator Release v3.1 . New Features and Fixes . Initial release | . Known Issues . None | . Development Tools . MPLAB X IDE v5.10 | .",
    "url": "http://localhost:4000/mhc/release_notes.html",
    "relUrl": "/release_notes.html"
  }
  ,"12": {
    "title": "Harmony 3 Configurator Package",
    "content": "MPLAB® Harmony 3 Configurator . MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices. Refer to the following links for more information. . Microchip 32-bit MCUs | Microchip 32-bit MPUs | Microchip MPLAB® X IDE | Microchip MPLAB® Harmony | Microchip MPLAB® Harmony Pages | . This repository contains the implementation of the MPLAB® Harmony 3 Configurator (MHC) tool. The MHC is an easy to use development tool with a Graphical User Interface (GUI) that simplifies device setup, library selection, and configuration, and application development. The MHC is available as a plugin that directly integrates with the MPLAB® X IDE or as a separate Java executable for standalone use with other development environments. . MHC includes a downloader tool that reads an online catalog of MPLAB Harmony 3 library packages so that the developers can select and download the libraries in which the they are interested. The configurator functionality provides a convenient, but powerful, development tool for choosing library components from downloaded packages and configuring them for the developer’s application. And, the built-in code generator produces the libraries and application starter code (usually in source form), based on the options chosen. . Getting started with MHC | Release Notes | . Contents Summary . File/Folder Description . doc | Help documentation and licenses for libraries used | . np_templates | New Project templates for supported toolchains | . databases | Device databases for supported toolchains | . scripts | Python scripts used for project generation | . *.jar | Java implementations of MHC modules. | . mhc.jar | Main Java executable (run: java -jar mhc.jar -h) | . harmony-database.jar | internal sub module to hold all symbols | . databaseUI.jar | internal sub module to show database | . mhc_utils.jar | internal sub module for harmony utility | . mplx_launcher.jar | internal sub module used with MPLABX platform | . runmhc.bat | Windows cmd batch file to run standalone MHC GUI | . Open source Libraries . Harmony 3 configurator and Content manager uses following open sources libraries: . | Library Name | Version | License | |———————————————–|—————————|——————————————————————————————————-| | cmdline.jar | | Apache License 2.0 https://github.com/remkop/picocli/blob/master/LICENSE | | docking-frames-common.jar | | GNU Lesser General Public License, version 2.1 http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html | | docking-frames-core.jar | | GNU Lesser General Public License, version 2.1 http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html | | freemarker-2.3.23.jar | 2.3.23 | Apache License Version 2.0 https://freemarker.apache.org/docs/app_license.html | | jython-standalone-2.7.2.jar | 2.7.2 | PSF License v2 https://github.com/jythontools/jython/blob/master/LICENSE.txt | | simple-xml-2.7.1.jar | 2.7.1 | The Apache Software License, Version 2.0 http://www.apache.org/licenses/LICENSE-2.0.txt | | jinja2 | 2.10.3 | BSD 3-Clause “New” or “Revised” License https://github.com/pallets/jinja/blob/master/LICENSE.rst | | markupsafe | 1.1.1 | BSD 3-Clause “New” or “Revised” License https://github.com/pallets/markupsafe/blob/master/LICENSE.rst | | jsch-0.1.54.jar | 0.1.54 | Revised BSD http://www.jcraft.com/jsch/LICENSE.txt | | org.eclipse.jgit-4.11.0.201803080745-r.jar | 4.11.0.201803080745-r | Eclipse Distribution License (New BSD License) | | slf4j-api-1.7.25.jar | 1.7.25 | MIT License http://www.opensource.org/licenses/mit-license.php | | slf4j-simple-1.7.25.jar | 1.7.25 | MIT License http://www.opensource.org/licenses/mit-license.php | __ . __ . . .",
    "url": "http://localhost:4000/mhc/",
    "relUrl": "/"
  }
  
}